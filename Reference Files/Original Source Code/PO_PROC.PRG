***************************
** FILE NAME: PO_PROC.PRG 
*  BY: 
*  DATE: October 12, 1987
*  DESC:
*  CALLED BY:
*  DATA FILES:

*  MULTI-USER RECORD/FILE LOCKING  +(M1)  FoxPro   Multi-User Code Insertion     

PROCEDURE TEXTPO2
@  1, 0 SAY MCOMPANY
@  1,68 SAY DATE()
@  2, 0 SAY MPROGRAM + MTITLE
@  4,01 SAY 'PO #:'
@ 3,0 TO 9,79
@ 3,0 TO 11,79
@ 4,09 SAY '-'
@ 4,14 SAY '-'
@ 4,42 SAY 'BROKER:'
DO CASE
CASE MCOMPANY = 'DIVISION 72 - LAND'
   @ 4,58 SAY "PO INDICATOR CODE:"
CASE MCOMPANY = 'DIVISION 15' .AND. MSALESMAN = '17' .AND. MRSUPCODE <> 'INVN' .AND. MBBUYCODE <> 'INVN'
   @ 4,58 SAY 'HOLD STORAGE FLAG:'
CASE MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   @ 4,58 SAY "'H' FOR HOLD FLAG:"
OTHERWISE
   @ 4,58 SAY "'X' FOR BROKERAGE:"
ENDCASE
@ 6,1   SAY 'ORDER DATE'
@ 6,13  SAY 'SHIP DATE' 
@ 6,25  SAY 'DEL REQD'
@ 6,37  SAY 'CUST PO #'
@ 6,53  SAY 'PICKUP LOCATION'
IF MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   @ 9,1 SAY  "MAINPO:  SHIPWITH: 1:    -   2:    -   3:    -   4:    -   5:    -   6:    - "
ENDIF
*@ 9,1 SAY "SHIPPED WITH PO'S: 1:    -   2:    -   3:    -   4:    -   5:    -   6:    - "
*@ 9,1 SAY "SHIPWITH: MAIN: X  1:XXXX-X  2:XXXX-X  3:XXXX-X  4:XXXX-X  5:XXXX-X  6:XXXX-X"   
*           1234567890123456789012345678901234567890123456789012345678901234567890123456789
*                    10        20        30        40        50        60        70          
RETURN

PROCEDURE TEXTPO3
@ 10,0 TO 17,79
@ 9,0  TO 12,0
@ 9,79 TO 12,79
@ 11,15 SAY 'SUPPLIER INFORMATION'
@ 12,1 SAY 'SHIPPED FROM:'
@ 12,40 SAY 'REMIT TO:'
@ 17,0 TO 24,79 
@ 16,0 TO 19,0
@ 16,79 TO 19,79
@ 18,15 SAY 'CUSTOMER INFORMATION'
@ 19,1 SAY 'SHIP TO:'
@ 19,40 SAY 'BILL TO:'
RETURN


PROCEDURE GETPO2
@ 04,07 GET msalesman PICTURE '##'
@ 04,10 GET mpo_nbr PICTURE '####'
@ 04,15 GET mpo_suffix PICTURE '@!'
@ 04,50 GET MBROK_NAME PICTURE '@!'
IF MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   @ 04,77 SAY MBROKERAGE PICTURE '@!'
ELSE
   @ 04,77 GET MBROKERAGE PICTURE '@!'
ENDIF
@ 07,01 GET mord_date
@ 07,13 GET mship_date 
@ 07,25 GET mdel_reqd  
@ 07,37 GET mbuyer_po PICTURE '@!'
@ 07,53 GET MPU_LOC PICTURE '@!'
IF MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   IF MMAIN_SHIP = 'N'
      @ 09,8 GET MMAIN_SHIP PICTURE '@!'
      @ 09,22 GET MPO_SHIP1 PICTURE '@!'
      @ 09,27 GET MPO_SUFF1 PICTURE '@!'
      @ 09,32 SAY MPO_SHIP2 PICTURE '@!'
      @ 09,37 SAY MPO_SUFF2 PICTURE '@!'
      @ 09,42 SAY MPO_SHIP3 PICTURE '@!'
      @ 09,47 SAY MPO_SUFF3 PICTURE '@!'
      @ 09,52 SAY MPO_SHIP4 PICTURE '@!'
      @ 09,57 SAY MPO_SUFF4 PICTURE '@!'
      @ 09,62 SAY MPO_SHIP5 PICTURE '@!'
      @ 09,67 SAY MPO_SUFF5 PICTURE '@!'
      @ 09,72 SAY MPO_SHIP6 PICTURE '@!'
      @ 09,77 SAY MPO_SUFF6 PICTURE '@!'
   ELSE
      @ 09,8 GET MMAIN_SHIP PICTURE '@!' VALID(MMAIN_SHIP = 'Y' .OR. MMAIN_SHIP = ' ')
      @ 09,22 GET MPO_SHIP1 PICTURE '@!'
      @ 09,27 GET MPO_SUFF1 PICTURE '@!'
      @ 09,32 GET MPO_SHIP2 PICTURE '@!'
      @ 09,37 GET MPO_SUFF2 PICTURE '@!'
      @ 09,42 GET MPO_SHIP3 PICTURE '@!'
      @ 09,47 GET MPO_SUFF3 PICTURE '@!'
      @ 09,52 GET MPO_SHIP4 PICTURE '@!'
      @ 09,57 GET MPO_SUFF4 PICTURE '@!'
      @ 09,62 GET MPO_SHIP5 PICTURE '@!'
      @ 09,67 GET MPO_SUFF5 PICTURE '@!'
      @ 09,72 GET MPO_SHIP6 PICTURE '@!'
      @ 09,77 GET MPO_SUFF6 PICTURE '@!'
   ENDIF
ENDIF
RETURN

PROCEDURE GETPO3
@ 02,55 SAY 'INV NBR: ' + MINV_NBR
@ 04,07 SAY msalesman PICTURE '##'
@ 04,10 SAY mpo_nbr PICTURE '####'
@ 04,15 SAY mpo_suffix PICTURE '#'
@ 04,50 GET MBROK_NAME PICTURE '@!'
IF MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   @ 04,77 SAY MBROKERAGE PICTURE '@!'
ELSE
   @ 04,77 GET MBROKERAGE PICTURE '@!'
ENDIF
@ 07,01 GET mord_date
@ 07,13 GET mship_date 
@ 07,25 GET mdel_reqd  
@ 07,37 GET mbuyer_po PICTURE '@!'
@ 07,53 GET MPU_LOC PICTURE '@!'
IF MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   IF MMAIN_SHIP = 'N'
      @ 09,8  GET MMAIN_SHIP PICTURE '@!'
      @ 09,22 GET MPO_SHIP1 PICTURE '@!'
      @ 09,27 GET MPO_SUFF1 PICTURE '@!'
      @ 09,32 SAY MPO_SHIP2 PICTURE '@!'
      @ 09,37 SAY MPO_SUFF2 PICTURE '@!'
      @ 09,42 SAY MPO_SHIP3 PICTURE '@!'
      @ 09,47 SAY MPO_SUFF3 PICTURE '@!'
      @ 09,52 SAY MPO_SHIP4 PICTURE '@!'
      @ 09,57 SAY MPO_SUFF4 PICTURE '@!'
      @ 09,62 SAY MPO_SHIP5 PICTURE '@!'
      @ 09,67 SAY MPO_SUFF5 PICTURE '@!'
      @ 09,72 SAY MPO_SHIP6 PICTURE '@!'
      @ 09,77 SAY MPO_SUFF6 PICTURE '@!'
   ELSE
      @ 09,8 GET MMAIN_SHIP PICTURE '@!' VALID(MMAIN_SHIP = 'Y' .OR. MMAIN_SHIP = ' ')
      @ 09,22 GET MPO_SHIP1 PICTURE '@!'
      @ 09,27 GET MPO_SUFF1 PICTURE '@!'
      @ 09,32 GET MPO_SHIP2 PICTURE '@!'
      @ 09,37 GET MPO_SUFF2 PICTURE '@!'
      @ 09,42 GET MPO_SHIP3 PICTURE '@!'
      @ 09,47 GET MPO_SUFF3 PICTURE '@!'
      @ 09,52 GET MPO_SHIP4 PICTURE '@!'
      @ 09,57 GET MPO_SUFF4 PICTURE '@!'
      @ 09,62 GET MPO_SHIP5 PICTURE '@!'
      @ 09,67 GET MPO_SUFF5 PICTURE '@!'
      @ 09,72 GET MPO_SHIP6 PICTURE '@!'
      @ 09,77 GET MPO_SUFF6 PICTURE '@!'
   ENDIF
ENDIF
RETURN

PROCEDURE SAYPO3
@ 02,55 SAY 'INV NBR: ' + MINV_NBR
@ 04,07 SAY msalesman PICTURE '##'
@ 04,10 SAY mpo_nbr PICTURE '####'
@ 04,15 SAY mpo_suffix PICTURE '#'
@ 04,50 SAY MBROK_NAME PICTURE '@!'
@ 04,77 SAY MBROKERAGE PICTURE '@!'
@ 07,01 SAY mord_date  
@ 07,13 SAY mship_date 
@ 07,25 SAY mdel_reqd  
@ 07,37 SAY mbuyer_po PICTURE '@!'
@ 07,53 SAY MPU_LOC PICTURE '@!'
IF MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   @ 09,8 SAY MMAIN_SHIP PICTURE '@!'
   @ 09,22 SAY MPO_SHIP1 PICTURE '@!'
   @ 09,27 SAY MPO_SUFF1 PICTURE '@!'
   @ 09,32 SAY MPO_SHIP2 PICTURE '@!'
   @ 09,37 SAY MPO_SUFF2 PICTURE '@!'
   @ 09,42 SAY MPO_SHIP3 PICTURE '@!'
   @ 09,47 SAY MPO_SUFF3 PICTURE '@!'
   @ 09,52 SAY MPO_SHIP4 PICTURE '@!'
   @ 09,57 SAY MPO_SUFF4 PICTURE '@!'
   @ 09,62 SAY MPO_SHIP5 PICTURE '@!'
   @ 09,67 SAY MPO_SUFF5 PICTURE '@!'
   @ 09,72 SAY MPO_SHIP6 PICTURE '@!'
   @ 09,77 SAY MPO_SUFF6 PICTURE '@!'
ENDIF
RETURN

PROCEDURE TEXTMISC
@ 2,0 CLEAR
@ 2,0 SAY MPROGRAM + MTITLE
@ 3,0 TO 23,79
IF MRSUPCODE <> 'NONE' .OR. MSUP_AMT1 <> 0 .OR. MSUP_AMT2 <> 0 .OR. MSUP_PALL <> 0
   @ 4,1  SAY 'SUPPLIER ADJUSTMENTS'
   @ 5,10  SAY '1. REASON:'
   @ 5,43 SAY 'AMOUNT:'
   @ 6,10 SAY '2. REASON:'
   @ 6,43 SAY 'AMOUNT:'
   @ 7,1 SAY 'PALLET ADJUSTMENT:'
ENDIF
@ 10,1 TO 10,78
@ 10,1 SAY '           NOTE:'
@ 12,1 TO 12,78
IF MBBUYCODE <> 'NONE' .OR. MCUS_AMT1 <> 0 .OR. MCUS_AMT2 <> 0 .OR. MCUS_PALL <> 0 .OR. MWRITEOFF <> 0
   @ 13,1 SAY 'CUSTOMER ADJUSTMENTS'
   @ 14,10 SAY '1. REASON:'
   @ 14,43 SAY 'AMOUNT:'
   @ 15,10 SAY '2. REASON:'
   @ 15,43 SAY 'AMOUNT:'
   @ 16,01 SAY 'PALLET ADJUSTMENT: '
   @ 19,04 SAY 'WRITEOFF AMOUNT:'
   @ 21,1 SAY '   INVOICE NOTE: '
ENDIF
RETURN

PROCEDURE GETMISC
IF MRSUPCODE <> 'NONE' .OR. MSUP_AMT1 <> 0 .OR. MSUP_AMT2 <> 0 .OR. MSUP_PALL <> 0
   @ 5,21 GET MSUP_REAS1 PICTURE '@!'
   @ 5,51 GET MSUP_AMT1 PICTURE '#######.##'
   @ 6,21 GET MSUP_REAS2 PICTURE '@!'
   @ 6,51 GET MSUP_AMT2 PICTURE '#######.##'
   @ 7,21 GET MSUP_PALL PICTURE '#####.##'
ENDIF
@ 10,18 GET MSUP_COMMT PICTURE '@!'
IF MBBUYCODE <> 'NONE' .OR. MCUS_AMT1 <> 0 .OR. MCUS_AMT2 <> 0 .OR. MCUS_PALL <> 0 .OR. MWRITEOFF <> 0
   @ 14,21 GET MCUS_REAS1 PICTURE '@!'
   @ 14,51 GET MCUS_AMT1 PICTURE '#######.##'
   @ 15,21 GET MCUS_REAS2 PICTURE '@!'
   @ 15,51 GET MCUS_AMT2 PICTURE '#######.##'
   @ 16,21 GET MCUS_PALL PICTURE '#####.##'
   @ 19,21 GET MWRITEOFF PICTURE '#####.##'
   @ 21,18 GET MINV_COMMT PICTURE '@!'
ENDIF
RETURN

PROCEDURE SAYMISC
IF MRSUPCODE <> 'NONE' .OR. MSUP_AMT1 <> 0 .OR. MSUP_AMT2 <> 0 .OR. MSUP_PALL <> 0
   @ 5,21 SAY MSUP_REAS1 PICTURE '@!'
   @ 5,51 SAY MSUP_AMT1 PICTURE '#######.##'
   @ 6,21 SAY MSUP_REAS2 PICTURE '@!'
   @ 6,51 SAY MSUP_AMT2 PICTURE '#######.##'
   @ 7,21 SAY MSUP_PALL PICTURE '#####.##'
ENDIF
@ 10,18 SAY MSUP_COMMT PICTURE '@!'
IF MBBUYCODE <> 'NONE' .OR. MCUS_AMT1 <> 0 .OR. MCUS_AMT2 <> 0 .OR. MCUS_PALL <> 0 .OR. MWRITEOFF <> 0
   @ 14,21 SAY MCUS_REAS1 PICTURE '@!'
   @ 14,51 SAY MCUS_AMT1 PICTURE '#######.##'
   @ 15,21 SAY MCUS_REAS2 PICTURE '@!'
   @ 15,51 SAY MCUS_AMT2 PICTURE '#######.##'
   @ 16,21 SAY MCUS_PALL PICTURE '#####.##'
   @ 19,21 SAY MWRITEOFF PICTURE '#####.##'
   @ 21,18 SAY MINV_COMMT PICTURE '@!'
ENDIF
RETURN

PROCEDURE TEXT2ND 
@ 4,7 SAY 'CK'
@ 04,10 SAY 'G RP' 
@ 05,7 SAY 'FH R EA'
@ 05,17 SAY 'PROD'
@ 05,30 SAY 'UNIT'
@ 05,48 SAY 'PURCH'
@ 05,56 SAY 'SELL'
@ 05,66 SAY 'TOTAL'
@ 05,75 SAY 'TOTAL'
@ 06,3  SAY 'QTY FR A FK'
@ 06,16 SAY 'DESCRIP'
@ 06,25 SAY 'SIZE'
@ 06,30 SAY 'PACK'
@ 06,40 SAY 'LBS'
@ 06,48 SAY 'PRICE'
@ 06,56 SAY 'PRICE'
@ 06,66 SAY 'PURCH'
@ 06,76 SAY 'SELL'
@ 08,0 TO 08,80
@ 24,0 TO 24,80
RETURN


PROCEDURE TEXT4TH 
@ 4,7 SAY 'CK'
@ 04,10 SAY 'G RP' 
@ 05,7 SAY 'FH R EA'
@ 05,17 SAY 'PROD'
@ 05,30 SAY 'UNIT'
@ 05,48 SAY 'PURCH'
@ 05,56 SAY 'SELL'
@ 05,66 SAY 'TOTAL'
@ 05,75 SAY 'TOTAL'
@ 06,3  SAY 'QTY FR A FK'
@ 06,16 SAY 'DESCRIP'
@ 06,25 SAY 'SIZE'
@ 06,30 SAY 'PACK'
@ 06,40 SAY 'LBS'
@ 06,48 SAY 'PRICE'
@ 06,56 SAY 'PRICE'
@ 06,66 SAY 'PURCH'
@ 06,76 SAY 'SELL'
@ 07,0 TO 07,80
@ 24,0 TO 24,80
RETURN

PROCEDURE INITPO   
MSALESMAN   = SPACE(2)
MPO_NBR     = SPACE(4)
MPO_SUFFIX  = SPACE(1)
MDEL_REQD   = CTOD('  /  /  ')
MORD_DATE   = CTOD('  /  /  ')
MBUYER_PO   = SPACE(15)
MSHIP_DATE  = CTOD('  /  /  ')
MTOT_LBS    = 0
MTOT_PURCH  = 0
MTOT_SELL   = 0
MFRT_CODE1  = SPACE(4)
MFRT_CODE2  = SPACE(4)
MFRT_CODE3  = SPACE(4)
MFRT_AMT1    = 0
MCOM_CODE   = SPACE(2)
MCOMM_CENT  = 0
MCOMM_AMT   = 0
MCOM_CODE2  = SPACE(2)
MCOM_CODE3  = SPACE(2)
MCOMM_CEN2  = 0
MCOMM_CEN3  = 0
MCOMM_AMT2  = 0
MCOMM_AMT3  = 0
MCOMM_ENT2  = 0
MCOMM_ENT3  = 0
MSALE_COMM  = 0
MZERO_COMM  = SPACE(1)
MSALE_CENT  = 0
MINV_FLG    = SPACE(1)
MINV_NBR    = SPACE(5)
MINV_DATE   = CTOD('  /  /  ')
STORE 0 TO MCOMM_ADJ
STORE SPACE(5) TO MBROK_NAME
STORE SPACE(2) TO MSAL_CODE2, MSAL_CODE3
STORE SPACE(25) TO MPU_LOC
STORE 0 TO MCOMM_ENT, MSALE2_AMT, MSALE2_ENT, MSALE2_CEN, MSALE_ENT
STORE 0 TO MSALE3_AMT, MSALE3_ENT, MSALE3_CEN, MSALE3_NET
STORE 0 TO MFRT1_ADJ1, MFRT1_ADJ2, MTOT_NET, MSALE2_NET
STORE SPACE(15) TO MFRT1_RS1, MFRT1_RS2
STORE SPACE(1) TO MBROKERAGE, MFRT2_FLG, MFRT3_FLG  
MFRT_CODE2 = SPACE(4)
MFRT_AMT2  = 0
MFRT_AMT3 = 0
RETURN

PROCEDURE SAYFLDS
@ 02,50 SAY MSALESMAN PICTURE '##'
@ 02,53 SAY MPO_NBR PICTURE '####'
IF MPO_SUFFIX = ' '
   @ 2,57 SAY ' '
ENDIF
@ 02,58 SAY MPO_SUFFIX PICTURE '#'
@ 02,73 SAY MBROK_NAME
@ 09,01 SAY MDEL_REQD  
@ 09,13 SAY MORD_DATE  
@ 09,25 SAY MBUYER_PO PICTURE '@!'
@ 09,40 SAY MSHIP_DATE 
@ 09,53 SAY MPU_LOC
RETURN

PROCEDURE GETHEAD
@ 02,50 GET MSALESMAN PICTURE '##'
@ 02,53 GET MPO_NBR PICTURE '####'
@ 02,58 GET MPO_SUFFIX PICTURE '@!'
@ 02,73 GET MBROK_NAME PICTURE '@!'
@ 04,11 SAY SUBSTR(MSUP_NAME,1,30)
@ 04,48 SAY SUBSTR(MBUY_NAME,1,31)     
@ 05,11 SAY MSUP_STRT
@ 05,48 SAY MBUY_STRT
@ 06,11 SAY TRIM(SUBSTR(MSUP_CITY,1,17)) + ', ' + MSUP_STATE + '  ' + MSUP_ZIP
@ 06,48 SAY TRIM(SUBSTR(MBUY_CITY,1,17)) + ', ' + MBUY_STATE + '  ' + MBUY_ZIP
@ 09,01 GET MDEL_REQD  
@ 09,13 GET MORD_DATE  
@ 09,25 GET MBUYER_PO PICTURE '@!'
@ 09,40 GET MSHIP_DATE 
@ 09,53 GET MPU_LOC PICTURE '@!'
RETURN

PROCEDURE GETHEAD2
@ 02,50 SAY MSALESMAN PICTURE '##'
@ 02,53 SAY MPO_NBR PICTURE '####'
IF MPO_SUFFIX <> ' '
   @ 02,58 SAY MPO_SUFFIX PICTURE '#'
ELSE
   @ 02,57 SAY ' '
ENDIF
@ 02,73 GET MBROK_NAME PICTURE '@!'
@ 04,11 SAY SUBSTR(MSUP_NAME,1,30)
@ 04,48 SAY SUBSTR(MBUY_NAME,1,31)     
@ 05,11 SAY MSUP_STRT
@ 05,48 SAY MBUY_STRT
@ 06,11 SAY TRIM(SUBSTR(MSUP_CITY,1,17)) + ', ' + MSUP_STATE + '  ' + MSUP_ZIP
@ 06,48 SAY TRIM(SUBSTR(MBUY_CITY,1,17)) + ', ' + MBUY_STATE + '  ' + MBUY_ZIP
@ 09,01 GET MDEL_REQD  
@ 09,13 GET MORD_DATE  
@ 09,25 GET MBUYER_PO PICTURE '@!'
@ 09,40 GET MSHIP_DATE 
@ 09,53 GET MPU_LOC PICTURE '@!'
RETURN

PROCEDURE SAYHEAD 
@ 02,50 SAY MSALESMAN PICTURE '##'
@ 02,53 SAY MPO_NBR PICTURE '####'
IF MPO_SUFFIX <> ' '
   @ 02,58 SAY MPO_SUFFIX PICTURE '#'
ELSE
   @ 02,57 SAY ' '
ENDIF
@ 2,73  SAY MBROK_NAME 
@ 04,11 SAY SUBSTR(MSUP_NAME,1,30)
@ 04,48 SAY SUBSTR(MBUY_NAME,1,31)     
@ 05,11 SAY MSUP_STRT
@ 05,48 SAY MBUY_STRT
@ 06,11 SAY TRIM(SUBSTR(MSUP_CITY,1,17)) + ', ' + MSUP_STATE + '  ' + MSUP_ZIP
@ 06,48 SAY TRIM(SUBSTR(MBUY_CITY,1,17)) + ', ' + MBUY_STATE + '  ' + MBUY_ZIP
@ 09,01 SAY MDEL_REQD  
@ 09,13 SAY MORD_DATE  
@ 09,25 SAY MBUYER_PO PICTURE '@!'
@ 09,40 SAY MSHIP_DATE 
@ 09,53 SAY MPU_LOC

PROCEDURE GETITM 
MDO_THIS = .T.
DO WHILE MDO_THIS 
   @ MLINE,2 GET MQTY(MNBR_ITM) PICTURE '####'
   @ MLINE,7 GET MFR_FZ(MNBR_ITM) PICTURE '@!'
   @ MLINE,10 GET MGRADE(MNBR_ITM) PICTURE '@!'
   @ MLINE,12 GET MPAK(MNBR_ITM) PICTURE '@!'
   @ MLINE,15 GET MPROD(MNBR_ITM) PICTURE '@!'
   @ MLINE,24 GET MSIZE(MNBR_ITM) PICTURE '@!'
   @ MLINE,30 GET MPACKSPEC(MNBR_ITM) PICTURE '@!'
   READ
   IF MPROD(MNBR_ITM) = SPACE(08)
      @ MLINE,0
      MNEXT_ITM = .F.
      MDO_THIS = .F.
      LOOP
   ENDIF
   
   
   IF MPACKSPEC(MNBR_ITM) = 'CWT' .OR. MPACKSPEC(MNBR_ITM) = 'CBO' .OR. MPACKSPEC(MNBR_ITM) = SPACE(4) .OR. SUBSTR(MPACKSPEC(MNBR_ITM),1,2) = 'CS' .OR. SUBSTR(MPACKSPEC(MNBR_ITM),1,1) = 'B' .OR. MPACKSPEC(MNBR_ITM) = '   '
      DO CASE
      CASE SUBSTR(MPACKSPEC(MNBR_ITM),1,1) = 'B'
         MLBS(MNBR_ITM) = MQTY(MNBR_ITM)
      CASE SUBSTR(MPACKSPEC(MNBR_ITM),1,1) = 'H'
         MLBS(MNBR_ITM) = MQTY(MNBR_ITM) * 24
      ENDCASE
      @ MLINE,35 GET MLBS(MNBR_ITM) PICTURE '999999.99'
   ELSE
      IF MPACKSPEC(MNBR_ITM) = '4/10'
         STORE 40 TO MMULT
      ELSE
         IF MPACKSPEC(MNBR_ITM) = '6/5'
            STORE 30 TO MMULT
         ELSE
            IF MPACKSPEC(MNBR_ITM) = '8/5'
               STORE 40 TO MMULT
            ELSE
               IF MPACKSPEC(MNBR_ITM) = '3/5'
                  STORE 33 TO MMULT
               ELSE
                  STORE VAL(MPACKSPEC(MNBR_ITM)) TO MMULT
               ENDIF
            ENDIF
         ENDIF
      ENDIF
      MLBS(MNBR_ITM) = MMULT * MQTY(MNBR_ITM)
      IF MSHRT_BOX(MNBR_ITM) <> 0
         MSHORT = MSHRT_BOX(MNBR_ITM) * MQTY(MNBR_ITM)
         MLBS(MNBR_ITM) = MLBS(MNBR_ITM) - MSHORT   
      ELSE  
         IF MSHRT_LBS(MNBR_ITM) <> 0
            MLBS(MNBR_ITM) = MLBS(MNBR_ITM) - MSHRT_LBS(MNBR_ITM)
         ENDIF
      ENDIF
      
      @ MLINE,35 GET MLBS(MNBR_ITM) PICTURE '999999.99'
      CLEAR GETS
   ENDIF
   
   @ MLINE,46 GET MPURC_PRI(MNBR_ITM) PICTURE '99.9999'
   @ MLINE,55 GET MSELL_PRI(MNBR_ITM) PICTURE '99.9999'
   READ
   
   *** WARNING EDIT HERE - PURCHASE PRICE GREATER THAN SELLING PRICE
   IF MPURC_PRI(MNBR_ITM) >= MSELL_PRI(MNBR_ITM)
      @ 25,0       
      @ 25,1 SAY 'WARNING: PURCHASE PRICE GREATER THAN OR EQUAL SELLING PRICE - PRESS RETURN ' 
      MSPACE = ' '
      @ 25,78 GET MSPACE
      READ
      @ 25,0 
   ENDIF
   SELECT E
   DO FOX_USE WITH "&MDBFLOC.PRODUCTS INDEX &MDBFLOC.PRODUCTS", .F.
   IF MSALESMAN <> '20'
      IF MPROD(MNBR_ITM) <> 'BROKER'
         IF MFR_FZ(MNBR_ITM) <> SPACE(2) 
            SEEK 'F' + MFR_FZ(MNBR_ITM)
            IF EOF()
               @ 25,0       
               @ 25,1 SAY 'ERROR: FRESH/FROZEN CODE INVALID - PRESS RETURN TO REENTER'
               MSPACE = ' '
               @ 25,78 GET MSPACE
               READ
               @ 25,0 
               LOOP
            ENDIF
         ELSE
            @ 25,0       
            @ 25,1 SAY 'ERROR: FRESH/FROZEN CODE NOT ENTERED - PRESS RETURN TO REENTER'
            MSPACE = ' '
            @ 25,78 GET MSPACE
            READ
            @ 25,0 
            LOOP
         ENDIF
      ENDIF
   ENDIF
   IF MGRADE(MNBR_ITM) <> SPACE(1)
      SEEK 'G' + MGRADE(MNBR_ITM)
      IF  EOF()
         @ 25,0       
         @ 25,1 SAY 'ERROR: GRADE CODE INVALID - PRESS RETURN TO REENTER'
         MSPACE = ' '
         @ 25,78 GET MSPACE
         READ
         @ 25,0 
         LOOP
      ENDIF
   ENDIF
   IF SUBSTR(MPAK(MNBR_ITM),1,1) <> SPACE(1)
      SEEK 'D' + SUBSTR(MPAK(MNBR_ITM),1,1)
      IF EOF()
         @ 25,0       
         @ 25,1 SAY 'ERROR: REFRIGERATION CODE INVALID - PRESS RETURN TO REENTER'
         MSPACE = ' '
         @ 25,78 GET MSPACE
         READ
         @ 25,0 
         LOOP
      ENDIF
   ENDIF
   *****************
   IF SUBSTR(MPAK(MNBR_ITM),2) <> SPACE(1)
      SEEK 'K' + SUBSTR(MPAK(MNBR_ITM),2)
      IF EOF()
         @ 25,0       
         @ 25,1 SAY 'ERROR: PACKAGING CODE INVALID - PRESS RETURN TO REENTER'
         MSPACE = ' '
         @ 25,78 GET MSPACE
         READ
         @ 25,0 
         LOOP
      ENDIF
   ENDIF
   
   IF MPROD(MNBR_ITM) <> 'BROKER'
      *SEEK 'R' + TRIM(MPROD(MNBR_ITM)) 
      SEEK 'R' + SUBSTR(MPROD(MNBR_ITM),1,4)
      IF EOF()
         @ 25,0       
         @ 25,1 SAY 'ERROR: PRODUCT CODE INVALID - PRESS RETURN TO REENTER'
         MSPACE = ' '
         @ 25,78 GET MSPACE
         READ
         @ 25,0 
         LOOP
      ENDIF
   ENDIF
   
   IF MSIZE(MNBR_ITM) <> SPACE(5)
      SEEK 'Z' + MSIZE(MNBR_ITM) 
      IF EOF()
         @ 25,0       
         @ 25,1 SAY 'ERROR: SIZE CODE INVALID - PRESS RETURN TO REENTER'
         MSPACE = ' '
         @ 25,78 GET MSPACE
         READ
         @ 25,0 
         LOOP
      ENDIF
   ENDIF
   IF MPACKSPEC(MNBR_ITM) <> SPACE(4)
      SEEK 'S' + MPACKSPEC(MNBR_ITM)
      IF EOF()
         @ 25,0       
         @ 25,1 SAY 'ERROR: PACKING SPEC CODE INVALID - PRESS RETURN TO REENTER'
         MSPACE = ' '
         @ 25,78 GET MSPACE
         READ
         @ 25,0 
         LOOP
      ENDIF
   ENDIF
   
   *** SHOW BACK LINE TOTALS HERE
   ***  MPURC_TOT(MNBR_ITM) =((MLBS(MNBR_ITM) + MSHRT_LBS(MNBR_ITM)) * MPURC_PRI(MNBR_ITM)) - (MSHRT_LBS(MNBR_ITM) * MPURC_PRI(MNBR_ITM))  
   ***  MPURC_TOT(MNBR_ITM) = ROUND(MPURC_TOT(MNBR_ITM),2)
   ***  MSELL_TOT(MNBR_ITM) =((MLBS(MNBR_ITM) + MSHRT_LBS(MNBR_ITM)) * MSELL_PRI(MNBR_ITM)) - (MSHRT_LBS(MNBR_ITM) * MSELL_PRI(MNBR_ITM))  
   ***  MSELL_TOT(MNBR_ITM) = ROUND(MSELL_TOT(MNBR_ITM),2)
   *** NEW WAY
   MVAL1 = (MLBS(MNBR_ITM) + MSHRT_LBS(MNBR_ITM)) * MPURC_PRI(MNBR_ITM) 
   MVAL2 = MSHRT_LBS(MNBR_ITM) * MPURC_PRI(MNBR_ITM)
   
   IF MVAL1 >= 0
      MVAL1 = INT((MVAL1+.005) * 100) / 100
   ELSE
      MVAL1 = INT((MVAL1-.005) * 100) / 100
   ENDIF
   
   IF MVAL2 >= 0
      MVAL2 = INT((MVAL2+.005) * 100) / 100
   ELSE
      MVAL2 = INT((MVAL2-.005) * 100) / 100
   ENDIF  
   
   MPURC_TOT(MNBR_ITM) = MVAL1 - MVAL2
   ******************************************************************************
   
   *** IF CUSTOMER = 'ASSOCIATED WHOLESALE GROCERS, INC'
   *** AND PRODUCT = '47184' = BAKED MRB 8 PIECE - 96 COUNT
   *** NEW AS OF 05/16/2006
   IF B->BBUYCODE = ' 189'.AND. MPROD(MNBR_ITM) = '47184'
      MVAL1 = MQTY(MNBR_ITM) * MSELL_PRI(MNBR_ITM)
   ELSE
      MVAL1 = (MLBS(MNBR_ITM) + MSHRT_LBS(MNBR_ITM)) * MSELL_PRI(MNBR_ITM)
   ENDIF

   ***MVAL1 = (MLBS(MNBR_ITM) + MSHRT_LBS(MNBR_ITM)) * MSELL_PRI(MNBR_ITM)
   MVAL2 = MSHRT_LBS(MNBR_ITM) * MSELL_PRI(MNBR_ITM)
   
   IF MVAL1 >= 0
      MVAL1 = INT((MVAL1+.005) * 100) / 100
   ELSE
      MVAL1 = INT((MVAL1-.005) * 100) / 100
   ENDIF
   
   IF MVAL2 >= 0
      MVAL2 = INT((MVAL2+.005) * 100) / 100
   ELSE
      MVAL2 = INT((MVAL2-.005) * 100) / 100
   ENDIF  
   
   MSELL_TOT(MNBR_ITM) = MVAL1 - MVAL2
   
   *** END OF NEW WAY
   
   ***** OLD WAY
   *  MVAL1 = (MLBS(MNBR_ITM) + MSHRT_LBS(MNBR_ITM)) * MPURC_PRI(MNBR_ITM) 
   *  MVAL2 = MSHRT_LBS(MNBR_ITM) * MPURC_PRI(MNBR_ITM)
   *  
   *  IF MVAL1 <> 0
   *     MVAL = INT(MVAL1*100)
   *     IF (ABS(MVAL1) * 100) - ABS(MVAL) > .49
   *        IF MVAL1 >= 0
   *           MVAL1 = (MVAL + 1) / 100
   *        ELSE
   *           MVAL1 = (MVAL - 1) / 100
   *        ENDIF
   *     ELSE
   *        MVAL1 = MVAL / 100
   *     ENDIF
   *  ENDIF
   *  IF MVAL2 <> 0
   *     MVAL = INT(MVAL2*100)
   *     IF (ABS(MVAL2) * 100) - ABS(MVAL) > .49
   *        IF MVAL2 >= 0
   *           MVAL2 = (MVAL + 1) / 100
   *        ELSE
   *           MVAL2 = (MVAL - 1) / 100
   *        ENDIF
   *     ELSE
   *        MVAL2 = MVAL / 100
   *     ENDIF
   *  ENDIF
   
   *  MPURC_TOT(MNBR_ITM) = MVAL1 - MVAL2
   *  ******************************************************************************
   
   *  MVAL1 = (MLBS(MNBR_ITM) + MSHRT_LBS(MNBR_ITM)) * MSELL_PRI(MNBR_ITM) 
   *  MVAL2 = MSHRT_LBS(MNBR_ITM) * MSELL_PRI(MNBR_ITM)
   
   *  IF MVAL1 <> 0
   *     MVAL = INT(MVAL1*100)
   *     IF (ABS(MVAL1) * 100) - ABS(MVAL) > .49
   *        IF MVAL1 >= 0
   *           MVAL1 = (MVAL + 1) / 100
   *        ELSE
   *           MVAL1 = (MVAL - 1) / 100
   *        ENDIF
   *     ELSE
   *        MVAL1 = MVAL / 100
   *     ENDIF
   *  ENDIF
   *  IF MVAL2 <> 0
   *     MVAL = INT(MVAL2*100)
   *     IF (ABS(MVAL2) * 100) - ABS(MVAL) > .49
   *        IF MVAL2 >= 0
   *           MVAL2 = (MVAL + 1) / 100
   *        ELSE
   *           MVAL2 = (MVAL - 1) / 100
   *        ENDIF
   *     ELSE
   *        MVAL2 = MVAL / 100
   *     ENDIF
   *  ENDIF
   *  MSELL_TOT(MNBR_ITM) = MVAL1 - MVAL2
   ******* END OF OLD WAY
   
   @ MLINE,2 SAY MQTY(MNBR_ITM) PICTURE '9999'
   @ MLINE,7 SAY MFR_FZ(MNBR_ITM) PICTURE '@!'
   @ MLINE,10 SAY MGRADE(MNBR_ITM) PICTURE '@!'
   @ MLINE,12 SAY MPAK(MNBR_ITM) PICTURE '@!'
   @ MLINE,15 SAY MPROD(MNBR_ITM) PICTURE '@!'
   @ MLINE,24 SAY MSIZE(MNBR_ITM) PICTURE '@!'
   @ MLINE,30 SAY MPACKSPEC(MNBR_ITM) PICTURE '@!'
   @ MLINE,35 SAY MLBS(MNBR_ITM) PICTURE '999999.99'
   @ MLINE,46 SAY MPURC_PRI(MNBR_ITM) PICTURE '99.9999'
   @ MLINE,55 SAY MSELL_PRI(MNBR_ITM) PICTURE '99.9999'
   @ MLINE,63 SAY MPURC_TOT(MNBR_ITM) PICTURE '99999.99'
   @ MLINE,72 SAY MSELL_TOT(MNBR_ITM) PICTURE '99999.99'
   MDO_THIS = .F.           
ENDDO
SELECT E
USE
SELECT B
RETURN

PROCEDURE GETSHORT 
@ 9,2 SAY MQTY(MNBR_ITM) PICTURE '9999'
@ 9,7 SAY MFR_FZ(MNBR_ITM) PICTURE '@!'
@ 9,10 SAY MGRADE(MNBR_ITM) PICTURE '@!'
@ 9,12 SAY MPAK(MNBR_ITM) PICTURE '@!'
@ 9,15 SAY MPROD(MNBR_ITM) PICTURE '@!'
@ 9,24 SAY MSIZE(MNBR_ITM) PICTURE '@!'
@ 9,30 SAY MPACKSPEC(MNBR_ITM) PICTURE '@!'
@ 9,35 SAY MLBS(MNBR_ITM) PICTURE '999999.99'
@ 9,46 SAY MPURC_PRI(MNBR_ITM) PICTURE '99.9999'
@ 9,55 SAY MSELL_PRI(MNBR_ITM) PICTURE '99.9999'
@ 9,63 SAY MPURC_TOT(MNBR_ITM) PICTURE '99999.99'
@ 9,72 SAY MSELL_TOT(MNBR_ITM) PICTURE '99999.99'
@ 10,0 TO 10,79
@ 12,02 SAY 'SHORT LBS/BOX'
@ 12,22 SAY 'TOTAL SHORT LBS'
@ 12,42 SAY 'SHORT PURCHASE'    
@ 12,61 SAY 'SHORT SELLING'
STORE MSHRT_BOX(MNBR_ITM) TO MLBS_BOX
STORE MSHRT_LBS(MNBR_ITM) TO MSW_LBS
@ 13,05 GET MLBS_BOX PICTURE '99999.99'
@ 13,25 GET MSW_LBS PICTURE '99999.99'
CLEAR GETS
@ 13,05 GET MLBS_BOX PICTURE '99999.99'
READ

MSW_LBS = MLBS_BOX * MQTY(MNBR_ITM)
@ 13,25 GET MSW_LBS PICTURE '#####.##'
READ

MMULT = 0

MLBS_DIFF = MSW_LBS - MSHRT_LBS(MNBR_ITM)
MLBS_X = MLBS(MNBR_ITM) - MLBS_DIFF
*** SHOW BACK LINE TOTALS HERE

**MPURC_X = MLBS_DIFF * MPURC_PRI(MNBR_ITM)
**MPURC_X = ROUND(MPURC_X,2)
**MPURC_X = MPURC_TOT(MNBR_ITM) - MPURC_X

**MSELL_X = MLBS_DIFF * MSELL_PRI(MNBR_ITM)
**MSELL_X = ROUND(MSELL_X,2)
**MSELL_X = MSELL_TOT(MNBR_ITM) - MSELL_X

**MPURCH_DIF = ROUND((MSW_LBS * MPURC_PRI(MNBR_ITM)),2)
**MSELL_DIF = ROUND((MSW_LBS * MSELL_PRI(MNBR_ITM)),2)

MVAL1 = (MLBS_X + MSW_LBS) * MPURC_PRI(MNBR_ITM) 
MVAL2 = MSW_LBS * MPURC_PRI(MNBR_ITM)

IF MVAL1 <> 0
   MVAL = INT(MVAL1*100)
   IF (ABS(MVAL1) * 100) - ABS(MVAL) > .49
      IF MVAL1 >= 0
         MVAL1 = (MVAL + 1) / 100
      ELSE
         MVAL1 = (MVAL - 1) / 100
      ENDIF
   ELSE
      MVAL1 = MVAL / 100
   ENDIF
ENDIF
IF MVAL2 <> 0
   MVAL = INT(MVAL2*100)
   IF (ABS(MVAL2) * 100) - ABS(MVAL) > .49
      IF MVAL2 >= 0
         MVAL2 = (MVAL + 1) / 100
      ELSE
         MVAL2 = (MVAL - 1) / 100
      ENDIF
   ELSE
      MVAL2 = MVAL / 100
   ENDIF
ENDIF

** CASE
**CASE MVAL1 = 0
**CASE MVAL1 > 0
**   *MVAL1 = INT((MVAL1+.005) * 100) / 100
**OTHERWISE
**   *MVAL1 = INT((MVAL1-.005) * 100) / 100
**ENDCASE

**DO CASE
**CASE MVAL2 = 0
**CASE MVAL2 > 0
**   *MVAL2 = INT((MVAL2+.005) * 100) / 100
**OTHERWISE
**   **MVAL2 = INT((MVAL2-.005) * 100) / 100
**ENDCASE  


MPURC_X = MVAL1 - MVAL2

******************************************************************************

MVAL1 = (MLBS_X + MSW_LBS) * MSELL_PRI(MNBR_ITM) 
MVAL2 = MSW_LBS * MSELL_PRI(MNBR_ITM)

IF MVAL1 <> 0
   MVAL = INT(MVAL1*100)
   IF (ABS(MVAL1) * 100) - ABS(MVAL) > .49
      IF MVAL1 >= 0
         MVAL1 = (MVAL + 1) / 100
      ELSE
         MVAL1 = (MVAL - 1) / 100
      ENDIF
   ELSE
      MVAL1 = MVAL / 100
   ENDIF
ENDIF

IF MVAL2 <> 0
   MVAL = INT(MVAL2*100)
   IF (ABS(MVAL2) * 100) - ABS(MVAL) > .49
      IF MVAL2 >= 0
         MVAL2 = (MVAL + 1) / 100
      ELSE
         MVAL2 = (MVAL - 1) / 100
      ENDIF
   ELSE
      MVAL2 = MVAL / 100
   ENDIF
ENDIF

**DO CASE
**CASE MVAL1 = 0
**CASE MVAL1 > 0
**   *MVAL1 = INT((MVAL1+.005) * 100) / 100
**OTHERWISE
**   *MVAL1 = INT((MVAL1-.005) * 100) / 100
**ENDCASE

**DO CASE
**CASE MVAL2 = 0
**CASE MVAL2 > 0
**   *MVAL2 = INT((MVAL2+.005) * 100) / 100
**OTHERWISE
**   **MVAL2 = INT((MVAL2-.005) * 100) / 100
**ENDCASE  

MSELL_X = MVAL1 - MVAL2

***********************************
MVAL1 = MSW_LBS * MPURC_PRI(MNBR_ITM)
IF MVAL1 <> 0
   MVAL = INT(MVAL1*100)
   IF (ABS(MVAL1) * 100) - ABS(MVAL) > .49
      IF MVAL1 >= 0
         MVAL1 = (MVAL + 1) / 100
      ELSE
         MVAL1 = (MVAL - 1) / 100
      ENDIF
   ELSE
      MVAL1 = MVAL / 100
   ENDIF
ENDIF
MPURCH_DIF = MVAL1 

MVAL1 = MSW_LBS * MSELL_PRI(MNBR_ITM)
IF MVAL1 <> 0
   MVAL = INT(MVAL1*100)
   IF (ABS(MVAL1) * 100) - ABS(MVAL) > .49
      IF MVAL1 >= 0
         MVAL1 = (MVAL + 1) / 100
      ELSE
         MVAL1 = (MVAL - 1) / 100
      ENDIF
   ELSE
      MVAL1 = MVAL / 100
   ENDIF
ENDIF

MSELL_DIF = MVAL1 

@ 13,44 SAY MPURCH_DIF PICTURE '99,999.99'
@ 13,62 SAY MSELL_DIF PICTURE '99,999.99'

@ 09,2 SAY MQTY(MNBR_ITM) PICTURE '9999'
@ 09,7 SAY MFR_FZ(MNBR_ITM) PICTURE '@!'
@ 09,10 SAY MGRADE(MNBR_ITM) PICTURE '@!'
@ 09,12 SAY MPAK(MNBR_ITM) PICTURE '@!'
@ 09,15 SAY MPROD(MNBR_ITM) PICTURE '@!'
@ 09,24 SAY MSIZE(MNBR_ITM) PICTURE '@!'
@ 09,30 SAY MPACKSPEC(MNBR_ITM) PICTURE '@!'
@ 9,35 SAY MLBS_X PICTURE '999999.99'
@ 9,46 SAY MPURC_PRI(MNBR_ITM) PICTURE '99.9999'
@ 9,55 SAY MSELL_PRI(MNBR_ITM) PICTURE '99.9999'
@ 09,63 SAY MPURC_X PICTURE '99999.99'
@ 09,72 SAY MSELL_X PICTURE '99999.99'
RETURN


PROCEDURE SAYITM
@ MLINE,2 SAY MQTY(MNBR_ITM) PICTURE '9999'
@ MLINE,7 SAY MFR_FZ(MNBR_ITM) PICTURE '@!'
@ MLINE,10 SAY MGRADE(MNBR_ITM) PICTURE '@!'
@ MLINE,12 SAY MPAK(MNBR_ITM) PICTURE '@!'
*@ MLINE,12 SAY MCLASS(MNBR_ITM) PICTURE '@!'
@ MLINE,15 SAY MPROD(MNBR_ITM) PICTURE '@!'
@ MLINE,24 SAY MSIZE(MNBR_ITM) PICTURE '@!'
@ MLINE,30 SAY MPACKSPEC(MNBR_ITM) PICTURE '@!'
@ MLINE,35 SAY MLBS(MNBR_ITM) PICTURE '999999.99'
@ MLINE,46 SAY MPURC_PRI(MNBR_ITM) PICTURE '99.9999'
@ MLINE,55 SAY MSELL_PRI(MNBR_ITM) PICTURE '99.9999'
@ MLINE,63 SAY MPURC_TOT(MNBR_ITM) PICTURE '99999.99'
@ MLINE,72 SAY MSELL_TOT(MNBR_ITM) PICTURE '99999.99'
RETURN

PROCEDURE GETFRT
IF MFRT_CODE1 <> 'NONE'
   @ 15,20 GET mfrt_AMT1   PICTURE '###,###.##'
ENDIF
IF MCOM_CODE <> SPACE(2)
   @ 17,47 GET MCOMM_CENT PICTURE '##.####'
   @ 17,69 GET MCOMM_ADJ PICTURE '#####.##'
ENDIF
@ 18,47 GET MSALE_CENT PICTURE '##.####'
RETURN

PROCEDURE GETFRT2
@ 6,30 GET MFRT_NAME1 PICTURE '@!'
@ 8,30 GET MCOM_NAME PICTURE '@!'
RETURN

PROCEDURE SAYFRT 
@ 6,30 SAY MFRT_NAME1
@ 8,30 SAY MCOM_NAME 
RETURN

PROCEDURE STORHEAD
STORE SALESMAN   TO MSALESMAN  
STORE PO_NBR     TO MPO_NBR    
STORE PO_SUFFIX  TO MPO_SUFFIX 
STORE SUP_CODE   TO MSUP_CODE  
STORE BUY_CODE   TO MBUY_CODE  
STORE RSUPCODE   TO MRSUPCODE
STORE BBUYCODE   TO MBBUYCODE
STORE DEL_REQD   TO MDEL_REQD  
STORE ORD_DATE   TO MORD_DATE  
STORE BUYER_PO   TO MBUYER_PO  
STORE SHIP_DATE  TO MSHIP_DATE 
STORE TOT_LBS    TO MTOT_LBS   
STORE INV_FLG    TO minv_flg
STORE INV_NBR    TO minv_nbr   
STORE INV_DATE   TO minv_date  
STORE BROK_NAME  TO MBROK_NAME
STORE PU_LOC     TO MPU_LOC
STORE BROKERAGE  TO MBROKERAGE
STORE TOT_PURCH TO MTOT_PURCH
STORE SUP_PALL  TO MSUP_PALL
STORE TOT_SELL TO MTOT_SELL
STORE CUS_PALL  TO MCUS_PALL
STORE TOT_NET   TO MTOT_NET
STORE GROSS     TO MGROSS
STORE FRT_CODE1 TO MFRT_CODE1
STORE FRT_AMT1 TO MFRT_AMT1
STORE REF_PO1  TO MREF_PO1
STORE REF_PO2  TO MREF_PO2
STORE REF_PO3  TO MREF_PO3 
STORE REF_PO4  TO MREF_PO4
STORE REF_PO5  TO MREF_PO5
STORE FRT2_FLG  TO MFRT2_FLG
STORE FRT3_FLG  TO MFRT3_FLG

STORE FRT1_ADJ1 TO MFRT1_ADJ1
STORE FRT1_ADJ2 TO MFRT1_ADJ2
STORE FRT1_RS1  TO MFRT1_RS1
STORE FRT1_RS2  TO MFRT1_RS2
STORE FRT_PALL  TO MFRT_PALL

STORE COM_CODE TO MCOM_CODE
STORE COMM_ENT TO MCOMM_ENT
STORE COMM_CENT TO MCOMM_CENT
STORE COMM_AMT TO MCOMM_AMT
STORE COMM_ADJ TO MCOMM_ADJ

STORE COM_CODE2 TO MCOM_CODE2
STORE COMM_ENT2 TO MCOMM_ENT2
STORE COMM_CEN2 TO MCOMM_CEN2
STORE COMM_AMT2 TO MCOMM_AMT2

STORE COM_CODE3 TO MCOM_CODE3
STORE COMM_ENT3 TO MCOMM_ENT3
STORE COMM_CEN3 TO MCOMM_CEN3
STORE COMM_AMT3 TO MCOMM_AMT3

STORE SALE_ENT TO MSALE_ENT
STORE SALE_COMM TO MSALE_COMM
STORE SALE_CENT TO MSALE_CENT
STORE ZERO_COMM TO MZERO_COMM

STORE SAL_CODE2 TO MSAL_CODE2
STORE SALE2_AMT TO MSALE2_AMT
STORE SALE2_ENT TO MSALE2_ENT
STORE SALE2_CEN TO MSALE2_CEN 
STORE SALE2_NET TO MSALE2_NET

STORE SAL_CODE3 TO MSAL_CODE3
STORE SALE3_AMT TO MSALE3_AMT
STORE SALE3_ENT TO MSALE3_ENT
STORE SALE3_CEN TO MSALE3_CEN 
STORE SALE3_NET TO MSALE3_NET

IF MFRT2_FLG = 'Y' 
   SELECT A
   DO FOX_USE WITH "FRT_2ND INDEX FRT2_PO, FRT2_FRT", .F.
   SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX
   MFRT_CODE2 = FRT_CODE2
   MFRT_AMT2  = FRT_AMT2
   SELECT B
ELSE
   MFRT_CODE2 = SPACE(4)
   MFRT_AMT2  = 0
ENDIF
IF MFRT3_FLG = 'Y' 
   SELECT A
   DO FOX_USE WITH "FRT_3RD INDEX FRT3_PO, FRT3_FRT", .F.
   SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX
   MFRT_CODE3 = FRT_CODE3
   MFRT_AMT3  = FRT_AMT3
   SELECT B
ELSE
   MFRT_CODE3 = SPACE(4)
   MFRT_AMT3  = 0
ENDIF

RETURN


PROCEDURE STORITM
STORE qty         TO MQTY(MNBR_ITM)
STORE frh_frz     TO MFR_FZ(MNBR_ITM)    
STORE grade       TO MGRADE(MNBR_ITM)    
STORE packaged    TO MPAK(MNBR_ITM)      
STORE product     TO MCLASS(MNBR_ITM)    
STORE SUBSTR(prod_desc,1,4)   TO MPROD(MNBR_ITM)     
STORE size        TO MSIZE(MNBR_ITM)      
STORE packed      TO MPACKSPEC(MNBR_ITM) 
STORE lbs         TO MLBS(MNBR_ITM)
STORE pur_price   TO MPURC_PRI(MNBR_ITM) 
STORE sel_price   TO MSELL_PRI(MNBR_ITM)
STORE tot_purch   TO MPURC_TOT(MNBR_ITM)
STORE tot_sell    TO MSELL_TOT(MNBR_ITM)
STORE SHRT_BOX    TO MSHRT_BOX(MNBR_ITM)
STORE SHRT_LBS    TO MSHRT_LBS(MNBR_ITM)
STORE BILL_PRI    TO MBILL_PRI(MNBR_ITM)
RETURN

PROCEDURE HISTITM
STORE qty         TO MQTY(MNBR_ITM)
STORE frh_frz     TO MFR_FZ(MNBR_ITM)    
STORE grade       TO MGRADE(MNBR_ITM)    
STORE packaged    TO MPAK(MNBR_ITM)      
STORE product     TO MCLASS(MNBR_ITM)    
STORE SUBSTR(prod_desc,1,8)   TO MPROD(MNBR_ITM)     
STORE size        TO MSIZE(MNBR_ITM)      
STORE packed      TO MPACKSPEC(MNBR_ITM) 
STORE lbs         TO MLBS(MNBR_ITM)
STORE pur_price   TO MPURC_PRI(MNBR_ITM) 
STORE sel_price   TO MSELL_PRI(MNBR_ITM)
STORE tot_purch   TO MPURC_TOT(MNBR_ITM)
STORE tot_sell    TO MSELL_TOT(MNBR_ITM)
RETURN

PROCEDURE REPLPO   
DO FILELOCK
IF SALESMAN <> MSALESMAN .OR. PO_NBR <> MPO_NBR .OR. PO_SUFFIX <> MPO_SUFFIX
   REPLACE salesman   WITH msalesman  
   REPLACE po_nbr     WITH mpo_nbr    
   REPLACE po_suffix  WITH mpo_suffix 
ENDIF
REPLACE sup_code   WITH msup_code  
REPLACE buy_code   WITH mbuy_code  
REPLACE RSUPCODE   WITH MRSUPCODE
REPLACE BBUYCODE   WITH MBBUYCODE
REPLACE del_reqd   WITH mdel_reqd  
REPLACE ord_date   WITH mord_date  
REPLACE buyer_po   WITH mbuyer_po  
REPLACE ship_date  WITH mship_date 
REPLACE BROK_NAME  WITH MBROK_NAME
REPLACE PU_LOC     WITH MPU_LOC
REPLACE BROKERAGE  WITH MBROKERAGE
***IF MBBUYCODE = 'INVN'
IF MBBUYCODE = 'I'
   REPLACE PAID_FLG WITH 'Y'
ENDIF

IF MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   IF MMAIN_SHIP = 'N'
      STORE ' ' TO MMAIN_SHIP
   ENDIF
   
   REPLACE MAIN_SHIP WITH MMAIN_SHIP
   UNLOCK
   
   STORE RECNO() TO MRECNO
   
   IF MMAIN_SHIP = 'Y'
      SELECT A
      DO FOX_USE WITH "SHIPWITH INDEX SHIPWITH", .F.
      SEEK B->SALESMAN + B->PO_NBR + B->PO_SUFFIX
      IF EOF()
         DO FILELOCK
         APPEND BLANK
         REPLACE SALESMAN WITH B->SALESMAN
         REPLACE PO_NBR   WITH B->PO_NBR
         REPLACE PO_SUFFIX WITH B->PO_SUFFIX
         UNLOCK
      ENDIF
      
      SELECT B
      
      IF A->PO_SHIP1 <> MPO_SHIP1
         IF A->PO_SHIP1 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP1 + A->PO_SUFF1
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
               UNLOCK
            ENDIF
         ENDIF
         IF MPO_SHIP1 <> SPACE(4)
            SEEK MSALESMAN + MPO_SHIP1 + MPO_SUFF1
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH A->PO_NBR
               REPLACE SHIP_SUFF WITH A->PO_SUFFIX
               UNLOCK
            ENDIF
         ENDIF
      ENDIF
      
      IF A->PO_SHIP2 <> MPO_SHIP2
         IF A->PO_SHIP2 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP2 + A->PO_SUFF2
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
               UNLOCK
            ENDIF
         ENDIF
         IF MPO_SHIP2 <> SPACE(4)
            SEEK MSALESMAN + MPO_SHIP2 + MPO_SUFF2
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH A->PO_NBR
               REPLACE SHIP_SUFF WITH A->PO_SUFFIX
               UNLOCK
            ENDIF
         ENDIF
      ENDIF
      
      IF A->PO_SHIP3 <> MPO_SHIP3
         IF A->PO_SHIP3 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP3 + A->PO_SUFF3
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
               UNLOCK
            ENDIF
         ENDIF
         IF MPO_SHIP3 <> SPACE(4)
            SEEK MSALESMAN + MPO_SHIP3 + MPO_SUFF3
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH A->PO_NBR
               REPLACE SHIP_SUFF WITH A->PO_SUFFIX
               UNLOCK
            ENDIF
         ENDIF
      ENDIF
      
      IF A->PO_SHIP4 <> MPO_SHIP4
         IF A->PO_SHIP4 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP4 + A->PO_SUFF4
            IF .NOT. EOF()                            
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
               UNLOCK
            ENDIF
         ENDIF
         IF MPO_SHIP4 <> SPACE(4)
            SEEK MSALESMAN + MPO_SHIP4 + MPO_SUFF4
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH A->PO_NBR
               REPLACE SHIP_SUFF WITH A->PO_SUFFIX
               UNLOCK
            ENDIF
         ENDIF
      ENDIF
      
      IF A->PO_SHIP5 <> MPO_SHIP5
         IF A->PO_SHIP5 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP5 + A->PO_SUFF5
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
               UNLOCK
            ENDIF
         ENDIF
         IF MPO_SHIP5 <> SPACE(4)
            SEEK MSALESMAN + MPO_SHIP5 + MPO_SUFF5
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH A->PO_NBR
               REPLACE SHIP_SUFF WITH A->PO_SUFFIX
               UNLOCK
            ENDIF
         ENDIF
      ENDIF
      
      IF A->PO_SHIP6 <> MPO_SHIP6
         IF A->PO_SHIP6 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP6 + A->PO_SUFF6
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
               UNLOCK
            ENDIF
         ENDIF
         IF MPO_SUFF6 <> SPACE(4)
            SEEK MSALESMAN + MPO_SHIP6 + MPO_SUFF6
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH A->PO_NBR
               REPLACE SHIP_SUFF WITH A->PO_SUFFIX
               UNLOCK
            ENDIF
         ENDIF
      ENDIF
      
      SELECT A
      DO RECLOCK
      REPLACE PO_SHIP1 WITH MPO_SHIP1
      REPLACE PO_SUFF1 WITH MPO_SUFF1
      REPLACE PO_SHIP2 WITH MPO_SHIP2
      REPLACE PO_SUFF2 WITH MPO_SUFF2
      REPLACE PO_SHIP3 WITH MPO_SHIP3
      REPLACE PO_SUFF3 WITH MPO_SUFF3
      REPLACE PO_SHIP4 WITH MPO_SHIP4
      REPLACE PO_SUFF4 WITH MPO_SUFF4
      REPLACE PO_SHIP5 WITH MPO_SHIP5
      REPLACE PO_SUFF5 WITH MPO_SUFF5
      REPLACE PO_SHIP6 WITH MPO_SHIP6
      REPLACE PO_SUFF6 WITH MPO_SUFF6
      UNLOCK
      
      USE
      SELECT B
      GOTO MRECNO
      
   ELSE
      SELECT B
      DO RECLOCK
      REPLACE SHIP_NBR  WITH MPO_SHIP1
      REPLACE SHIP_SUFF WITH MPO_SUFF1
      UNLOCK
      SELECT A
      DO FOX_USE WITH "SHIPWITH INDEX SHIPWITH", .F.
      SEEK B->SALESMAN + B->PO_NBR + B->PO_SUFFIX
      
      IF .NOT. EOF()
         SELECT B
         IF A->PO_SHIP1 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP1 + A->PO_SUFF1
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
            ENDIF
         ENDIF
         IF A->PO_SHIP2 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP2 + A->PO_SUFF2
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
            ENDIF
         ENDIF
         IF A->PO_SHIP3 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP3 + A->PO_SUFF3
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
            ENDIF
         ENDIF
         IF A->PO_SHIP4 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP4 + A->PO_SUFF4
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
            ENDIF
         ENDIF
         IF A->PO_SHIP5 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP5 + A->PO_SUFF5
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
            ENDIF
         ENDIF
         IF A->PO_SHIP6 <> SPACE(4)
            SEEK MSALESMAN + A->PO_SHIP6 + A->PO_SUFF6
            IF .NOT. EOF()
               DO RECLOCK
               REPLACE SHIP_NBR WITH SPACE(4)
               REPLACE SHIP_SUFF WITH SPACE(1)
            ENDIF
         ENDIF
         SELECT A
         DO RECLOCK
         DELETE
         UNLOCK
         USE
         
         SELECT B
         GOTO MRECNO
      ENDIF
   ENDIF   
ENDIF
FLUSH
UNLOCK
RETURN

PROCEDURE REPLITM
X = 1
SELECT C
USE PO_DTL INDEX PO_DTL
DO FILELOCK
DO WHILE I <= MMAX     
   IF MAPPEND
      APPEND BLANK
      REPLACE salesman   WITH MSALESMAN
      REPLACE po_nbr     WITH MPO_NBR
      REPLACE po_suffix  WITH MPO_SUFFIX
      REPLACE item_nbr   WITH STR(I,2)  
      MADDED = .T.
   ELSE
      SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + STR(I,2)
      IF EOF()
         APPEND BLANK
         REPLACE salesman   WITH MSALESMAN
         REPLACE po_nbr     WITH MPO_NBR
         REPLACE po_suffix  WITH MPO_SUFFIX
         REPLACE item_nbr   WITH STR(I,2)  
         MADDED = .T.
      ENDIF
   ENDIF
   REPLACE qty         WITH MQTY(X)
   REPLACE frh_frz     WITH MFR_FZ(X)    
   REPLACE grade       WITH MGRADE(X)    
   REPLACE packaged    WITH MPAK(X)      
   REPLACE product     WITH MCLASS(X)    
   REPLACE prod_desc   WITH MPROD(X)     
   REPLACE size        WITH MSIZE(X)      
   REPLACE packed      WITH MPACKSPEC(X) 
   REPLACE lbs         WITH MLBS(X)
   REPLACE pur_price   WITH MPURC_PRI(X) 
   REPLACE sel_price   WITH MSELL_PRI(X)
   REPLACE tot_purch   WITH MPURC_TOT(X)
   REPLACE tot_sell    WITH MSELL_TOT(X)
   replace shrt_box    with mshrt_box(x)
   REPLACE SHRT_LBS    WITH MSHRT_LBS(X)
   X = X + 1
   I = I + 1
ENDDO
FLUSH
UNLOCK
SELECT B 
RETURN

PROCEDURE REPLONE      
SELECT D
USE HIST_DTL INDEX HIST_DTL
MADDED = .F.
SELECT C
IF .NOT. MAPPEND
   SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + STR(I,2)
   IF .NOT. EOF()
      SELECT D
      DO FILELOCK
      APPEND BLANK
      REPLACE salesman   WITH MSALESMAN
      REPLACE po_nbr     WITH MPO_NBR
      REPLACE po_suffix  WITH MPO_SUFFIX
      REPLACE item_nbr   WITH STR(I,2)  
      REPLACE qty         WITH C->QTY  
      REPLACE frh_frz     WITH C->FRH_FRZ       
      REPLACE grade       WITH C->GRADE       
      REPLACE packaged    WITH C->PACKAGED 
      REPLACE product     WITH C->PRODUCT  
      REPLACE prod_desc   WITH C->PROD_DESC  
      REPLACE size        WITH C->SIZE       
      REPLACE packed      WITH C->PACKED   
      REPLACE lbs         WITH C->LBS   
      REPLACE pur_price   WITH C->PUR_PRICE  
      REPLACE sel_price   WITH C->SEL_PRICE 
      REPLACE tot_purch   WITH C->TOT_PURCH
      REPLACE tot_sell    WITH C->TOT_SELL    
      REPLACE REAS_CODE   WITH MREAS_CODE
      REPLACE REAS_DESC   WITH MREAS_DESC
      REPLACE HIST_DATE   WITH MDATE
      REPLACE HIST_TIME   WITH MTIME
      REPLACE INV_FLG     WITH C->INV_FLG
      REPLACE INV_NBR     WITH C->INV_NBR
      REPLACE SHTSUPAMT   WITH MPURC_TOT(X) - MORIG_PURC
      REPLACE SHTCUSAMT   WITH MSELL_TOT(X) - MORIG_SELL
      REPLACE SHORT_LBS   WITH MLBS(X) - MORIG_LBS
      *** REPLACE USERID  WITH MUSERID
      FLUSH
      UNLOCK
   ENDIF
ENDIF
SELECT C
DO FILELOCK

IF MAPPEND
   APPEND BLANK
   REPLACE salesman   WITH MSALESMAN
   REPLACE po_nbr     WITH MPO_NBR
   REPLACE po_suffix  WITH MPO_SUFFIX
   REPLACE item_nbr   WITH STR(I,2)  
   MADD_ITM = .T.
ELSE
   IF EOF()
      APPEND BLANK
      REPLACE salesman   WITH MSALESMAN
      REPLACE po_nbr     WITH MPO_NBR
      REPLACE po_suffix  WITH MPO_SUFFIX
      REPLACE item_nbr   WITH STR(I,2)  
      MADD_ITM = .T.
   ELSE
      MCHG_ITM = .T.
   ENDIF
ENDIF
REPLACE qty         WITH MQTY(X)
REPLACE frh_frz     WITH MFR_FZ(X)    
REPLACE grade       WITH MGRADE(X)    
REPLACE packaged    WITH MPAK(X)      
REPLACE product     WITH MCLASS(X)    
REPLACE prod_desc   WITH MPROD(X)     
REPLACE size        WITH MSIZE(X)      
REPLACE packed      WITH MPACKSPEC(X) 
REPLACE lbs         WITH MLBS(X)
REPLACE pur_price   WITH MPURC_PRI(X) 
REPLACE sel_price   WITH MSELL_PRI(X)
STORE MSELL_PRI(X)     TO MCUR_PRICE
REPLACE tot_purch   WITH MPURC_TOT(X)
REPLACE tot_sell    WITH MSELL_TOT(X)
REPLACE SHRT_BOX    WITH MSHRT_BOX(X)
IF MSHRT_BOX(X) <> 0
   REPLACE SHRT_LBS    WITH MQTY(X) * MSHRT_BOX(X) 
ELSE  
   REPLACE SHRT_LBS    WITH MSHRT_LBS(X)
ENDIF
REPLACE BILL_PRI   WITH MBILL_PRI(X)
**REPLACE TOT_BILL WITH ROUND((MBILL_PRI(X) * MLBS(X)),2)
REPLACE TOT_BILL WITH ROUND((LBS + SHRT_LBS) * BILL_PRI,2) - ROUND(BILL_PRI * SHRT_LBS,2)
FLUSH
UNLOCK
RETURN

PROCEDURE PUBLPO  
PUBLIC MSALESMAN, MPO_NBR, MPO_SUFFIX, MBROKERAGE
PUBLIC MDEL_REQD, MORD_DATE, MBUYER_PO, MSHIP_DATE
PUBLIC MTOT_LBS, MTOT_PURCH, MTOT_SELL, MFRT_CODE1, MFRT_AMT1                          
PUBLIC MCOMM_CENT, MCOMM_AMT, MSALE_COMM, MSALE_CENT, MINV_FLG
PUBLIC MCOMM_CEN2, MCOMM_AMT2, MCOMM_CEN3, MCOMM_AMT3, MCOMM_ENT3
PUBLIC MINV_NBR, MINV_DATE, MBUYER_PD                         
PUBLIC MCOM_CODE, MREF_PO1, MREF_PO2, MCOM_CODE2, MCOM_CODE3
PUBLIC MCOMM_ADJ, MBROK_NAME, MPU_LOC, MINV_COMMT
PUBLIC MFRT1_ADJ1, MFRT1_ADJ2, MFRT1_RS1, MFRT1_RS2
PUBLIC MSALE_ENT, MTOT_NET, MFRT_PALL, SFRT_PALL, MZERO_COMM
PUBLIC MCOMM_ENT, MCOMM_ENT2, MSALE2_NET, MSALE2_AMT, MSALE2_ENT, MSALE2_CEN, MSAL_CODE2, MGROSS
PUBLIC STOT_LBS, STOT_PURCH, STOT_SELL, STOT_NET, SGROSS, SFRT_AMT1             
PUBLIC SCOMM_AMT, SCOMM_AMT2, SCOMM_AMT3
PUBLIC SSALE_COMM, SSALE2_AMT, MCUS_PALL, MSUP_PALL, SCUS_PALL, SSUP_PALL, SSALE2_NET
PUBLIC SSALE3_NET, SSALE3_AMT
PUBLIC MSALE3_AMT, MSALE3_ENT, MSALE3_CEN, MSAL_CODE3, MSALE3_NET
PUBLIC MFRT2_FLG, MFRT_CODE2, MFRT_AMT2, SFRT_CODE2, SFRT_AMT2
PUBLIC MFRT3_FLG, MFRT_CODE3, MFRT_AMT3, SFRT_CODE3, SFRT_AMT3
RETURN

PROCEDURE RELEPO  
RETURN

PROCEDURE REPLFRT
IF MCOMPANY = 'AMERICHICKEN, INC' .OR. MCOMPANY = 'MIDWEST FOOD -DIV 11'
   MAM_FLG = .T.
ELSE
   MAM_FLG = .F.
ENDIF
DO CASE
CASE MAM_FLG .AND. B->INV_FLG <> ' '
   ***** CHECK OUT FOR THE FIRST THIRD PARTY COMMISSION
   IF (B->COM_CODE <> MCOM_CODE .OR. B->COMM_AMT <> MCOMM_AMT)
      STORE B->COMM_AMT TO MOLD_AMT
      STORE B->COM_CODE TO MOLD_CODE
      SELECT D
      DO FOX_USE WITH "COMTHD INDEX COMTHD, COMTDT, COMTPD", .F.
      *** LOOK FOR A NOT PAID INVOICE ENTRY 
      SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + '1' + ' I'
      IF .NOT. EOF()
         DO RECLOCK
         REPLACE COM_CODE WITH MCOM_CODE
         REPLACE AMOUNT WITH MCOMM_AMT
         UNLOCK
      ELSE
         *** LOOK FOR A NOT PAID CORRECTION ENTRY - first 3rd party
         SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + '1' + ' C1'
         IF EOF()
            *** FIND THE LAST POSTED RECORD  TO MAKE A BACKOUT ENTRY
            SET ORDER TO 2
            SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + '1'
            DO WHILE .NOT. EOF() .AND. SALESMAN = MSALESMAN .AND. PO_NBR = MPO_NBR .AND. PO_SUFFIX = MPO_SUFFIX .AND. THD_SEQ = '1'
               STORE AMOUNT TO MOLD_AMT
               STORE COM_CODE TO MOLD_CODE
               SKIP
            ENDDO
            SET ORDER TO 1
            DO FILELOCK
            APPEND BLANK
            REPLACE SALESMAN WITH MSALESMAN
            REPLACE PO_NBR   WITH MPO_NBR
            REPLACE PO_SUFFIX WITH MPO_SUFFIX
            REPLACE THD_SEQ   WITH '1'
            REPLACE INV_NBR WITH B->INV_NBR
            REPLACE TRAN_DATE WITH DATE()
            REPLACE COR_FLG WITH 'C'
            REPLACE SEQ WITH '1'
            REPLACE COM_TYPE WITH 'T'
            REPLACE AMOUNT WITH (-1) * MOLD_AMT
            REPLACE COM_CODE WITH MOLD_CODE
         ENDIF
         SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + '1' + ' C2'
         IF EOF()
            DO FILELOCK
            APPEND BLANK
            REPLACE SALESMAN WITH MSALESMAN
            REPLACE PO_NBR   WITH MPO_NBR
            REPLACE PO_SUFFIX WITH MPO_SUFFIX
            REPLACE THD_SEQ   WITH '1'
            REPLACE INV_NBR WITH B->INV_NBR
            REPLACE TRAN_DATE WITH DATE()
            REPLACE COR_FLG WITH 'C'
            REPLACE SEQ WITH '2'
            REPLACE COM_TYPE WITH 'T'
         ENDIF
         DO RECLOCK
         REPLACE COM_CODE WITH MCOM_CODE
         REPLACE AMOUNT WITH MCOMM_AMT
         UNLOCK
      ENDIF
   ENDIF   
   ***** CHECK OUT FOR THE SECOND THIRD PARTY COMMISSION
   IF (B->COM_CODE2 <> MCOM_CODE2 .OR. B->COMM_AMT2 <> MCOMM_AMT2)
      STORE B->COMM_AMT2 TO MOLD_AMT2
      STORE B->COM_CODE2 TO MOLD_CODE2
      SELECT D
      DO FOX_USE WITH "COMTHD INDEX COMTHD, COMTDT, COMTPD", .F.
      *** LOOK FOR A NOT PAID INVOICE ENTRY
      SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + '2' + ' I'
      IF .NOT. EOF()
         DO RECLOCK
         REPLACE COM_CODE WITH MCOM_CODE2
         REPLACE AMOUNT WITH MCOMM_AMT2
         UNLOCK
      ELSE
         *** LOOK FOR A NOT PAID CORRECTION ENTRY
         SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + '2' + ' C1'
         IF EOF()
            *** FIND THE LAST POSTED RECORD  TO MAKE A BACKOUT ENTRY
            SET ORDER TO 2
            SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + '2'
            DO WHILE .NOT. EOF() .AND. SALESMAN = MSALESMAN .AND. PO_NBR = MPO_NBR .AND. PO_SUFFIX = MPO_SUFFIX .AND. THD_SEQ = '2'
               STORE AMOUNT TO MOLD_AMT2
               STORE COM_CODE TO MOLD_CODE2
               SKIP
            ENDDO
            SET ORDER TO 1
            DO FILELOCK
            APPEND BLANK
            REPLACE SALESMAN WITH MSALESMAN
            REPLACE PO_NBR   WITH MPO_NBR
            REPLACE PO_SUFFIX WITH MPO_SUFFIX
            REPLACE THD_SEQ   WITH '2'
            REPLACE INV_NBR WITH B->INV_NBR
            REPLACE TRAN_DATE WITH DATE()
            REPLACE COR_FLG WITH 'C'
            REPLACE SEQ WITH '1'
            REPLACE COM_TYPE WITH 'T'
            REPLACE AMOUNT WITH (-1) * MOLD_AMT2
            REPLACE COM_CODE WITH MOLD_CODE2
         ENDIF
         SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX + '2' + ' C2'
         IF EOF()
            DO FILELOCK
            APPEND BLANK
            REPLACE SALESMAN WITH MSALESMAN
            REPLACE PO_NBR   WITH MPO_NBR
            REPLACE PO_SUFFIX WITH MPO_SUFFIX
            REPLACE INV_NBR WITH B->INV_NBR
            REPLACE THD_SEQ WITH '2'
            REPLACE TRAN_DATE WITH DATE()
            REPLACE COR_FLG WITH 'C'
            REPLACE SEQ WITH '2'
            REPLACE COM_TYPE WITH 'T'
         ENDIF
         DO RECLOCK
         REPLACE COM_CODE WITH MCOM_CODE2
         REPLACE AMOUNT WITH MCOMM_AMT2
         UNLOCK
      ENDIF
   ENDIF
   
   SELECT D
   USE
   
ENDCASE

*** WRITE BACK THIS FREIGHT INFORMATION TO HEADER 
SELECT B
DO RECLOCK

REPLACE TOT_PURCH WITH MTOT_PURCH
REPLACE TOT_SELL WITH MTOT_SELL
REPLACE TOT_NET  WITH MNET
REPLACE TOT_LBS WITH MTOT_LBS
REPLACE GROSS WITH MGROSS
REPLACE FRT_CODE1 WITH MFRT_CODE1
REPLACE FRT_AMT1 WITH MFRT_AMT1
REPLACE REF_PO1  WITH MREF_PO1
REPLACE REF_PO2  WITH MREF_PO2
REPLACE REF_PO3  WITH MREF_PO3
REPLACE REF_PO4  WITH MREF_PO4
REPLACE REF_PO5  WITH MREF_PO5
REPLACE FRT1_ADJ1 WITH MFRT1_ADJ1
REPLACE FRT1_ADJ2 WITH MFRT1_ADJ2
REPLACE FRT1_RS1  WITH MFRT1_RS1
REPLACE FRT1_RS2  WITH MFRT1_RS2
REPLACE FRT_PALL  WITH MFRT_PALL
REPLACE FRT2_FLG  WITH MFRT2_FLG
REPLACE FRT3_FLG  WITH MFRT3_FLG

REPLACE COM_CODE WITH MCOM_CODE
REPLACE COMM_ENT WITH MCOMM_ENT
REPLACE COMM_CENT WITH MCOMM_CENT
REPLACE COMM_AMT WITH MCOMM_AMT
REPLACE COMM_ADJ WITH MCOMM_ADJ
REPLACE COM_CODE2 WITH MCOM_CODE2
REPLACE COMM_ENT2 WITH MCOMM_ENT2
REPLACE COMM_CEN2 WITH MCOMM_CEN2
REPLACE COMM_AMT2 WITH MCOMM_AMT2
REPLACE COM_CODE3 WITH MCOM_CODE3
REPLACE COMM_ENT3 WITH MCOMM_ENT3
REPLACE COMM_CEN3 WITH MCOMM_CEN3
REPLACE COMM_AMT3 WITH MCOMM_AMT3

REPLACE SALE_ENT WITH MSALE_ENT
REPLACE SALE_COMM WITH MSALE_COMM
REPLACE SALE_CENT WITH MSALE_CENT
REPLACE ZERO_COMM WITH MZERO_COMM

REPLACE SAL_CODE2 WITH MSAL_CODE2
REPLACE SALE2_AMT WITH MSALE2_AMT
REPLACE SALE2_ENT WITH MSALE2_ENT
REPLACE SALE2_NET WITH MSALE2_NET
REPLACE SALE2_CEN WITH MSALE2_CEN

REPLACE SAL_CODE3 WITH MSAL_CODE3
REPLACE SALE3_AMT WITH MSALE3_AMT
REPLACE SALE3_ENT WITH MSALE3_ENT
REPLACE SALE3_NET WITH MSALE3_NET
REPLACE SALE3_CEN WITH MSALE3_CEN
FLUSH
UNLOCK

IF MFRT2_FLG = 'Y'
   SELECT A
   DO FOX_USE WITH "FRT_2ND INDEX FRT2_PO, FRT2_FRT", .F.
   SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX
   IF EOF()
      DO FILELOCK
      APPEND BLANK
      REPLACE SALESMAN  WITH MSALESMAN
      REPLACE PO_NBR    WITH MPO_NBR
      REPLACE PO_SUFFIX WITH MPO_SUFFIX
      REPLACE FRT_CODE2 WITH MFRT_CODE2
      UNLOCK
   ENDIF
   DO RECLOCK
   REPLACE FRT_AMT2 WITH MFRT_AMT2
   REPLACE SHIP_DATE WITH MSHIP_DATE
   UNLOCK
   SELECT B
ENDIF
IF MFRT3_FLG = 'Y'
   SELECT A
   DO FOX_USE WITH "FRT_3RD INDEX FRT3_PO, FRT3_FRT", .F.
   SEEK MSALESMAN + MPO_NBR + MPO_SUFFIX
   IF EOF()
      DO FILELOCK
      APPEND BLANK
      REPLACE SALESMAN  WITH MSALESMAN
      REPLACE PO_NBR    WITH MPO_NBR
      REPLACE PO_SUFFIX WITH MPO_SUFFIX
      REPLACE FRT_CODE3 WITH MFRT_CODE3
      UNLOCK
   ENDIF
   DO RECLOCK
   REPLACE FRT_AMT3 WITH MFRT_AMT3
   REPLACE SHIP_DATE WITH MSHIP_DATE
   UNLOCK
   SELECT B
ENDIF

RETURN

PROCEDURE REPLFRT1
*** WRITE BACK THIS MAIN INFORMATION TO HEADER 
SELECT B
DO RECLOCK
REPLACE TOT_SELL WITH MTOT_SELL
REPLACE TOT_NET  WITH MNET
REPLACE TOT_LBS WITH MTOT_LBS
REPLACE GROSS WITH MGROSS
FLUSH
UNLOCK
RETURN


PROCEDURE MONTHCO
DO CASE
   
CASE MMO = '01'
   STORE 'JANUARY' TO MMONTH
CASE MMO = '02'
   STORE 'FEBRUARY' TO MMONTH
CASE MMO = '03'
   STORE 'MARCH' TO MMONTH
CASE MMO = '04'
   STORE 'APRIL' TO MMONTH
CASE MMO = '05'
   STORE 'MAY' TO MMONTH
CASE MMO = '06'
   STORE 'JUNE' TO MMONTH
CASE MMO = '07'
   STORE 'JULY' TO MMONTH
CASE MMO = '08'
   STORE 'AUGUST' TO MMONTH
CASE MMO = '09'
   STORE 'SEPTEMBER' TO MMONTH
CASE MMO = '10'
   STORE 'OCTOBER' TO MMONTH
CASE MMO = '11'
   STORE 'NOVEMBER' TO MMONTH
CASE MMO = '12'
   STORE 'DECEMBER' TO MMONTH
OTHERWISE
   STORE ' ' TO MMONTH
ENDCASE
RETURN

PROCEDURE CUS_ADJ
SELECT E
DO FILELOCK
DO FOX_USE WITH "CUS_INV INDEX CUSIVNBR, CUS_DATE, CUS_INV, CUS_SHIP", .F.
IF B->INV_NBR <> SPACE(5)
   STORE B->INV_NBR TO MINV_NBR
   IF B->PAID_FLG <> 'Y'
      SEEK MINV_NBR
      IF EOF()
         APPEND BLANK
         REPLACE salesman   WITH B->salesman  
         REPLACE po_nbr     WITH B->po_nbr    
         REPLACE po_suffix  WITH B->po_suffix 
         REPLACE bbuycode   WITH B->bbuycode  
         REPLACE buyer_po   WITH B->buyer_po  
         REPLACE TOT_SELL  WITH (MTOT_SELL + MCUS_PALL) - (STOT_SELL + MCUS_PALL)
         ** IF VAL(MINV_NBR) < 10000
         **   REPLACE inv_nbr    WITH 'A' + SUBSTR(MINV_NBR,2)
         ** ELSE
         REPLACE INV_NBR WITH MINV_NBR
         ** ENDIF
         REPLACE DEB_CRD WITH 'Y'
         REPLACE INV_DATE WITH DATE()
         REPLACE SHIP_DATE WITH DATE()        
      ELSE
         REPLACE TOT_SELL WITH MTOT_SELL
         REPLACE CUS_PALL WITH MCUS_PALL
      ENDIF
   ELSE
      ** IF VAL(MINV_NBR) < 10000
      **   SEEK 'A' + SUBSTR(MINV_NBR,2)
      ** ELSE
      SEEK MINV_NBR + 'Y'
      ** ENDIF
      IF EOF()
         APPEND BLANK
         REPLACE salesman   WITH B->salesman  
         REPLACE po_nbr     WITH B->po_nbr    
         REPLACE po_suffix  WITH B->po_suffix 
         REPLACE bbuycode   WITH B->bbuycode  
         REPLACE buyer_po   WITH B->buyer_po  
         REPLACE TOT_SELL  WITH (MTOT_SELL + MCUS_PALL) - (STOT_SELL + MCUS_PALL)
         ** IF VAL(MINV_NBR) < 10000
         **    REPLACE inv_nbr    WITH 'A' + SUBSTR(MINV_NBR,2)
         ** ELSE
         REPLACE INV_NBR WITH MINV_NBR
         ** ENDIF
         REPLACE DEB_CRD WITH 'Y'
         REPLACE INV_DATE WITH DATE()
         REPLACE SHIP_DATE WITH DATE()        
      ELSE
         REPLACE TOT_SELL  WITH TOT_SELL + ((MTOT_SELL + MCUS_PALL) - (STOT_SELL + SCUS_PALL))  
      ENDIF
   ENDIF
   SELECT E
   USE
ENDIF

RETURN
*Formatted by: ToolBox Ver. 1.2  on 6/28/2 at 6:34 AM.
